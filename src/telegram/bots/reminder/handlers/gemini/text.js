const fs = require("fs");
const path = require("path");
const axios = require("axios");
const cron = require("node-cron");
const gTTS = require("gtts");

const chat = require("../../chat");
const geminiService = require("../../../../../api/gemini/geminiService");
const instructions = require("../../models");
const extractJsonSubstringForGemini = require("../../../../../helpers/extractJsonSubstringForGemini");

let index = 0;
let data = {};
const USER_DATA_TIMEOUT = 14 * 24 * 60 * 60 * 1000; // 14 days
const menu = {
  values: "/values",
  english: "/english",
};

const setInitData = (payload = {}) => {
  return {
    chatHistory: [],
    currentPage: menu.values, //menu.values,
  };
};

const clearInactiveUserData = () => {
  const currentTime = Date.now();
  for (const chatId in data) {
    const userData = data[chatId];
    if (currentTime - userData.lastInteractionTime > USER_DATA_TIMEOUT) {
      delete data[chatId];
    }
  }
};

setInterval(clearInactiveUserData, USER_DATA_TIMEOUT);

const updateLastInteractionTime = (chatId) => {
  if (data[chatId]) {
    data[chatId].lastInteractionTime = Date.now();
  }
};

const getUserData = (chatId) => {
  if (!data[chatId]) {
    data[chatId] = setInitData();
  }
  return data[chatId];
};

const callAPI = async ({ chatId, userMessage, customInstructions }) => {
  const userData = getUserData(chatId);

  if (!userMessage) {
    userData.chatHistory = userData.chatHistory.filter(
      (_, i, arr) => i !== arr.length - 1
    );
    userData.chatHistory.push({
      role: "model",
      parts: "",
    });
  } else {
    userData.chatHistory.push(
      {
        role: "user",
        parts: userMessage,
      },
      {
        role: "model",
        parts: "",
      }
    );
  }

  try {
    const res = await geminiService.generateChatText({
      userMessage: userMessage,
      instructions: customInstructions,
      chatHistory: userData.chatHistory,
    });

    console.log("-------------------------------");
    console.log(11111, res);
    const data = extractJsonSubstringForGemini(res);
    console.log(222222, data);

    userData.chatHistory[userData.chatHistory.length - 1].parts = data;

    return data;
  } catch (error) {
    console.log("üöÄ ~ error:", error);
    return null;
  }
};

const convertMarkdownToJson = (markdownContent, outputFilePath) => {
  if (!markdownContent || markdownContent.trim().length === 0) {
    console.error("–ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Markdown");
    return [];
  }

  const lines = markdownContent.split("\n");
  const result = [];
  let currentItem = null;

  console.log("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...");

  for (let line of lines) {
    line = line.trim();

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å # –∏–ª–∏ ##)
    if (line.startsWith("#")) continue;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (!line) continue;

    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏, —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
    if (/^\d+\.\s/.test(line)) {
      if (currentItem) {
        result.push(currentItem);
      }
      currentItem = {
        text: line.replace(/^\d+\.\s*/, ""),
        lastEdited: new Date().toISOString(),
      };
    } else if (currentItem) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫ —Ç–µ–∫—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
      currentItem.text += " " + line;
    } else {
      result.push({ text: line, lastEdited: new Date().toISOString() });
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (currentItem) {
    result.push(currentItem);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
  if (result.length === 0) {
    console.error("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç");
    return [];
  }

  console.log("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", result);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
  fs.writeFileSync(outputFilePath, JSON.stringify(result, null, 2), "utf8");
  console.log(`JSON —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ ${outputFilePath}`);

  return result;
};

const callAPIv2 = async (
  {
    chatId,
    initUserData = "",
    userMessage = "",
    modelInstructions = [{ text: "–°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–∏—è–º/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º" }],
  },
  schema
) => {
  const userData = getUserData(chatId);

  if (
    Array.isArray(userData.chatHistory) &&
    userData.chatHistory.length === 0
  ) {
    userData.chatHistory = [
      {
        role: "user",
        parts: [{ text: initUserData }],
      },
      {
        role: "model",
        parts: modelInstructions,
      },
    ];
  }

  if (
    userMessage?.trim() &&
    Array.isArray(userData.chatHistory) &&
    userData.chatHistory[0]?.role === "user"
  ) {
    userData.chatHistory[0].parts.push({ text: userMessage });
  }

  try {
    const jsonResponse = await geminiService.generateChatTextBySchema(
      {
        userMessage,
        chatHistory: userData.chatHistory,
      },
      schema
    );

    const data = JSON.parse(jsonResponse);
    const combinedString = Object.values(data).join(" ");
    console.log("üöÄ ~ data:", data, combinedString);

    // console.log("-------------------------------");
    // console.log(11111, jsonResponse);

    userData.chatHistory[1].parts.push({ text: combinedString });

    return data;
  } catch (error) {
    console.log("üöÄ ~ error:", error);
    return null;
  }
};

const transformTextToAudio = async ({ text, filePath, lang = "en" }) => {
  const gtts = new gTTS(text, lang);

  const audioFilePath =
    filePath ?? path.join(__dirname, "..", "..", "data", "audio.mp3");

  return new Promise((resolve, reject) => {
    gtts.save(audioFilePath, (err) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ:", err);
        reject(err);
      } else {
        console.log(`–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: ${audioFilePath}`);
        resolve(audioFilePath);
      }
    });
  });
};

// Random principal
// "0,20 7-21 * * *"
// '*/10 * * * * *'
cron.schedule("0,20 7-21 * * *", async () => {
  try {
    const data = fs.readFileSync(
      path.join(__dirname, "../../data", "principals.json"),
      "utf8"
    );

    const jsonData = JSON.parse(data);
    if (jsonData.length === 0) {
      console.log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.");
      return;
    }

    if (index < jsonData.length) {
      const message = jsonData[index].text;
      await chat.sendMessage(process.env.MY_TELEGRAM_ID, message, {
        parse_mode: "Markdown",
      }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message}`);
      index++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    } else {
      console.log("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞.");
      index = 0; // –ï—Å–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ
    }

    return;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞:", error);
    return [];
  }

  const schema = {
    type: geminiService.SchemaType.OBJECT,
    properties: {
      quote: {
        description:
          "–¶–∏—Ç–∞—Ç–∞, –ø—Ä–∏–Ω—Ü–∏–ø, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –≤ –ø–æ–ª–Ω–æ–º –µ–µ –æ–±—ä–µ–º–µ, —Ç–æ –µ—Å—Ç—å —Ü–µ–ª–∏–∫–æ–º –±–µ–∑ –∑–∂–∞—Ç–∏–∏.",
        type: geminiService.SchemaType.STRING,
        nullable: false,
      },
      detail: {
        description:
          "–õ–∞–∫–æ–Ω–∏—á–Ω–æ–µ —Ä–∞–∑—è—Å–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–æ–≤ —Ü–∏—Ç–∞—Ç—ã —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥–ª—É–±–∏–Ω—É —Ü–∏—Ç–∞—Ç—ã. –ù–µ –¥–æ–ª–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –∏–∑ –ø–æ–ª—è quote",
        type: geminiService.SchemaType.STRING,
        nullable: false,
      },
    },
    required: ["quote", "detail"],
  };
  // every one hour
  const res = await callAPIv2(
    {
      chatId: process.env.MY_TELEGRAM_ID,
      initUserData: instructions.principals,
      userMessage: instructions.notification,
    },
    schema
  );

  // –®–∞–≥ 4: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
  if (!res) {
    throw new Error("Empty response from AI model");
  }

  // –®–∞–≥ 5: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ –æ–±—ä–µ–∫—Ç

  if (res.quote) {
    // const audioFilePath = await transformTextToAudio({
    //   text: `${res.quote}\n\n${res.detail}`,
    //   lang: "ru",
    // });

    // chat.sendAudio(process.env.MY_TELEGRAM_ID, audioFilePath, {
    //   caption: `*${res.quote}*\n\n_${res.detail}_`,
    //   parse_mode: "Markdown",
    // });

    chat.sendMessage(
      process.env.MY_TELEGRAM_ID,
      `*${res.quote}*\n\n${res.detail}`,
      {
        parse_mode: "Markdown",
      }
    );
  }
});

// "30 14 * * *"
// Find the flaws
cron.schedule("0 7-22/3 * * *", async () => {
  // once per day
  const schema = {
    type: geminiService.SchemaType.OBJECT,
    properties: {
      response: {
        description: "–¢–≤–æ–π –æ—Ç–≤–µ—Ç",
        type: geminiService.SchemaType.STRING,
        nullable: false,
      },
    },
    required: ["response"],
  };

  const res = await callAPIv2(
    {
      chatId: process.env.MY_TELEGRAM_ID,
      initUserData: instructions.principals,
      userMessage: instructions.flaws,
    },
    schema
  );

  if (!res.response) return;

  // const audioFilePath = await transformTextToAudio({
  //   text: res.response,
  //   lang: "ru",
  // });
  // chat.sendAudio(process.env.MY_TELEGRAM_ID, audioFilePath, {
  //   caption: extractJsonSubstringForGemini(res.response),
  //   parse_mode: "Markdown",
  // });

  chat.sendMessage(process.env.MY_TELEGRAM_ID, res.response, {
    parse_mode: "Markdown",
  });
});

const runPrincipal = async (chatId, userMessage) => {
  const schema = {
    type: geminiService.SchemaType.OBJECT,
    properties: {
      data: {
        description: "–¢–≤–æ–π –≥—Ä–∞–º–º–æ—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        type: geminiService.SchemaType.STRING,
        nullable: false,
      },
    },
    required: ["data"],
  };
  // every one hour
  const response = await callAPIv2(
    {
      chatId: chatId,
      initUserData: `${instructions.init}\n\n${instructions.principals}`,
      userMessage,
    },
    schema
  );

  try {
    if (response.data?.length > 500) {
      chat.sendMessage(chatId, response.data, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "Update",
                callback_data: "update",
              },
            ],
          ],
        },
      });
    } else {
      chat.sendMessage(chatId, response.data, {
        parse_mode: "Markdown",
      });
    }
  } catch (e) {
    chat.sendMessage(chatId, response.data);
  }
};

const runEnglish = async (chatId, userMessage) => {
  const schema = {
    type: geminiService.SchemaType.OBJECT,
    properties: {
      data: {
        description: "–ü—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç —É—á–∏—Ç–µ–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
        type: geminiService.SchemaType.STRING,
        nullable: false,
      },
    },
    required: ["data"],
  };
  // every one hour
  const response = await callAPIv2(
    {
      chatId: chatId,
      initUserData: instructions.english,
      userMessage,
    },
    schema
  );

  const audioFilePath = await transformTextToAudio({
    text: response.data,
  });

  chat.sendAudio(process.env.MY_TELEGRAM_ID, audioFilePath, {
    caption: response.data,
    parse_mode: "Markdown",
  });
};

const getVoiceMessageAsBase64 = async (fileId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API
    const fileUrl = await chat.getFileLink(fileId);

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ Base64
    const response = await axios.get(fileUrl, { responseType: "arraybuffer" });
    const base64AudioFile = Buffer.from(response.data, "binary").toString(
      "base64"
    );
    return base64AudioFile;
  } catch (error) {
    console.error("Error converting voice message to Base64:", error.message);
    throw new Error("Failed to get voice message as Base64");
  }
};

const getContentByAudio = async (fileId, schema) => {
  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64
    const base64AudioFile = await getVoiceMessageAsBase64(fileId);

    // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞
    const res = await geminiService.generateContentByAudio(
      {
        text: instructions.audio,
        base64AudioFile,
      },
      schema
    );

    // –®–∞–≥ 4: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (!res) {
      throw new Error("Empty response from AI model");
    }

    const data = JSON.parse(res);

    return {
      success: true,
      data,
    };
  } catch (error) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    console.error("Error in getAIResponse:", error.message);
    return {
      success: false,
      message: error.message || "An unexpected error occurred",
    };
  }
};

module.exports = () => {
  chat.on("text", (msg) => {
    const chatId = msg.chat.id;
    const userMessage = msg.text;
    const userData = getUserData(chatId);

    updateLastInteractionTime(chatId);

    const menus = Object.values(menu);

    if (menus.includes(userMessage)) return;

    if (userData.currentPage === menu.english) {
      runEnglish(chatId, userMessage);
    } else {
      runPrincipal(chatId, userMessage);
    }

    // chat.setMyCommands([
    //   {
    //     command: "/values",
    //     description: "–¶–µ–Ω–Ω–æ—Å—Ç–∏",
    //   },
    //   {
    //     command: "/english",
    //     description: "English",
    //   },
    // ]);
  });

  chat.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const button = query.data;

    try {
      if (button === "update") {
        callAPI({ chatId });
      }
    } catch (error) {
      console.log("üöÄ ~ chat.on ~ error:", error);
    }
  });

  chat.onText(/\/values/, (msg) => {
    const chatId = msg.chat.id;
    const userData = getUserData(chatId);
    userData.currentPage = menu.values;
    chat.sendMessage(chatId, "–í–∫–ª. –¶–µ–Ω–Ω–æ—Å—Ç–∏");
    return;
  });

  chat.onText(/\/english/, (msg) => {
    const chatId = msg.chat.id;
    const userData = getUserData(chatId);
    userData.currentPage = menu.english;
    chat.sendMessage(chatId, "–í–∫–ª. English");
    return;
  });

  chat.on("document", async (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if (msg.document) {
      const fileName = msg.document.file_name;
      const fileExtension = path.extname(fileName);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª .md
      if (fileExtension === ".md") {
        try {
          // –ü–æ–ª—É—á–∞–µ–º file_id
          const fileId = msg.document.file_id;

          // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
          const fileLink = await chat.getFileLink(fileId);
          console.log("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª:", fileLink);

          // –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          const response = await axios.get(fileLink);
          const markdownContent = response.data;

          if (!markdownContent) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Markdown —Ñ–∞–π–ª–∞");
          }

          console.log("Markdown —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—É—á–µ–Ω–æ:", markdownContent);

          // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
          const outputFilePath = path.join(
            __dirname,
            "../../data",
            "principals.json"
          );

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .md —Ñ–∞–π–ª–∞ –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
          const jsonResult = convertMarkdownToJson(
            markdownContent,
            outputFilePath
          );

          if (!jsonResult || jsonResult.length === 0) {
            throw new Error(
              "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ JSON –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            );
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω
          chat.sendMessage(
            chatId,
            `–í–∞—à JSON –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: \`${outputFilePath}\``
          );
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:", error.message);
          chat.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.");
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞
        chat.sendMessage(
          chatId,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .md"
        );
      }
    }
  });

  chat.on("voice", async (msg) => {
    const chatId = msg.chat.id;
    const fileId = msg.voice.file_id;

    const schema = {
      type: geminiService.SchemaType.OBJECT,
      properties: {
        original: {
          description:
            "–¢–µ–∫—Å—Ç, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –∞—É–¥–∏–æ, –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –í–µ—Ä–Ω—É—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
          type: geminiService.SchemaType.STRING,
          nullable: false,
        },
        corrected: {
          description:
            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏. –ï—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
          type: geminiService.SchemaType.STRING,
        },
        explanation: {
          description:
            "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –£–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏ –ø–æ—á–µ–º—É.",
          type: geminiService.SchemaType.STRING,
        },
        response: {
          description:
            "–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º, –≤–∫–ª—é—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å–æ–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º.",
          type: geminiService.SchemaType.STRING,
          nullable: false,
        },
        responseRu: {
          description: "–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ª—è response –Ω–∞ —Ä—É—Å—Å–∫–æ–º.",
          type: geminiService.SchemaType.STRING,
          nullable: false,
        },
      },
      required: ["original", "corrected", "explanation", "response"],
    };

    const res = await getContentByAudio(fileId, schema);

    if (res.success) {
      console.log("Voice", res);

      const { corrected, explanation, original, response, responseRu } =
        res.data;

      if (corrected !== original) {
        const message = `*Corrected*\n${corrected}\n\n*Original*\n${original}\n\n*Explanation*\n${explanation}`;

        await chat.sendMessage(chatId, message, {
          parse_mode: "Markdown",
        });
      }

      const audioFilePath = await transformTextToAudio({
        text: response,
      });
      chat.sendAudio(process.env.MY_TELEGRAM_ID, audioFilePath, {
        caption: `*${response}*\n\n_${responseRu}_`,
        parse_mode: "Markdown",
      });
    }
  });
};
